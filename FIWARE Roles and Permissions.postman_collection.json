{
	"info": {
		"_postman_id": "24108c31-ca17-4451-9829-d4e6bb05aaa3",
		"name": "FIWARE Roles and Permissions",
		"description": "The tutorial explains how to create applications, and how to assign roles and permissions to them.\nIt takes the users and organizations created in the [previous tutorial](https://github.com/Fiware/tutorials.Identity-Management)\nand ensures that only legitmate users will have access to resources.\n\nThe `docker-compose` files for this tutorial can be found on GitHub: \n\n![GitHub](https://fiware.github.io/tutorials.Identity-Management/icon/GitHub-Mark-32px.png) [FIWARE 402: Roles and Permissions](https://github.com/Fiware/tutorials.Roles-Permissions)\n\n# What is Authorization?\n\n> \"No matter what he does, every person on earth plays a central role in the history of the world.\n> And normally he doesn't know it\"\n>\n> — Paulo Coelho (The Alchemist)\n\n\nAuthorization is the function of specifying access rights/privileges to resources related to information\nsecurity. More formally, \"to authorize\" is to define an access policy. In the case of Keyrock, User\naccess is granted based on permissions assigned to a role.\n\nEvery application secured by the **Keyrock** generic enabler can define a set of permissions - i.e.\na set of things that can be done within the application. For example within the application, the ability\nto send a commmand to unlock a Smart Door could be secured behind a `Unlock Door` permission. Similarly\nthe ability to send a commmand to ring the alarm bell could be secured behind a `Ring Bell` permission,\nand the ability to alter prices could be secured behind a `Price Change` permission\n\nThese permissions are grouped together in a series of roles - for example `Unlock Door` and `Ring Bell`\ncould both be assigned to the Security Role, meaning that Users who are subsequently given that role\nwould gain both permissions.\n\nPermissions can overlap and be assigned to multiple roles - maybe `Ring Bell` is also assigned to the management\nrole along with `Price Change` and `Order Stock`.\n\nIn turn users or organizations will be assigned to one of more roles - each user will gain the sum of all the\npermissions for each role they have. For example if Alice is assigned to both management and security roles,\nshe will gain all four permissions `Unlock Door`, `Ring Bell`, `Price Change` and `Order Stock`.\n\nThe concept of a role is unknown to a user - they only know the list of permissions they have been granted,\nnot how the permissions are split up within the application.\n\nIn summary, permissions are all the possible actions that can be done to resources within an application, whereas roles\nare groups of actions which can be done by a type of user of that application.\n\n\n## Standard Concepts of Identity Management\n\nThe following common objects are found with the **Keyrock** Identity Management database:\n\n* **User** - Any signed up user able to identify themselves with an eMail and password. Users can be assigned\n rights individually or as a group\n* **Application** -  Any securable FIWARE application consisting of a series of microservices\n* **Organization** - A group of users who can be assigned a series of rights. Altering the rights of the organization\n effects the access of all users of that organization\n* **OrganizationRole** - Users can either be members or admins of an organization - Admins are able to add and remove users\n from their organization, members merely gain the roles and permissions of an organiation. This allows each organization\n to be responisible for their members and removes the need for a super-admin to administer all rights\n* **Role** - A role is a descriptive bucket for a set of permissions. A role can be assigned to either a single user\n or an organization. A signed-in user gains all the permissions from all of their own roles plus all of the roles associated\n to their organization\n* **Permission** - An ability to do something on a resource within the system\n\nAdditionally two further non-human application objects can be secured within a FIWARE application:\n\n* **IoTAgent** - a proxy betwen IoT Sensors and  the Context Broker\n* **PEPProxy** - a middleware for use between generic enablers challenging the rights of a user.\n\n\n The relationship between the objects can be seen below:\n\n![](https://fiware.github.io/tutorials.Roles-Permissions/img/entities.png)\n\n## OAuth2\n\n**Keyrock** uses [OAuth2](https://oauth.net/2/) to enable third-party applications\nto obtain limited access to services. **OAuth2** is the open standard for access delegation to\ngrant access rights. It allows notifying a resource provider (e.g. the Knowage Generic Enabler)\nthat the resource  owner (e.g. you) grants permission to a third-party (e.g. a Knowage Application)\naccess to their information (e.g. the list of entities).\n\nThere are several common OAuth 2.0 grant flows, the details of which can be found below:\n\n* [Authorization Code](https://oauth.net/2/grant-types/authorization-code)\n* [Implicit](https://oauth.net/2/grant-types/implicit)\n* [Password](https://oauth.net/2/grant-types/password)\n* [Client Credentials](https://oauth.net/2/grant-types/client-credentials)\n* [Device Code](https://oauth.net/2/grant-types/device-code)\n* [Refresh Token](https://oauth.net/2/grant-types/refresh-token)\n\nThe primary concept is that both **Users**  and **Applications** must first identify themselves using\na standard OAuth2 Challenge-Response mechanism. Thereafter a user is assigned a token which they\nappend to every subsequent request. This token identifies the user, the application and the rights the\nuser is able to exercise.  **Keyrock** can then be used with other enablers can be used to limit and\nlock-down access. The details of the access flows are discussed below and in subsequent tutorials.\n\nThe reasoning behind OAuth2 is that you never need to expose your own username and password to a\nthird party to give them  full access - you merely permit the relevant access which can be either Read-Only\nor Read-Write and such access can be defined down to a granular level. Furthermore there is provision for\nrevoking access at any time, leaving the resource owner in control of who can access what.\n\n\n# Prerequisites\n\n## Docker\n\nTo keep things simple both components will be run using [Docker](https://www.docker.com). **Docker** is a\ncontainer technology which allows to different components isolated into their respective environments.\n\n* To install Docker on Windows follow the instructions [here](https://docs.docker.com/docker-for-windows/)\n* To install Docker on Mac follow the instructions [here](https://docs.docker.com/docker-for-mac/)\n* To install Docker on Linux follow the instructions [here](https://docs.docker.com/install/)\n\n**Docker Compose** is a tool for defining and running multi-container Docker applications. A\n[YAML file](https://raw.githubusercontent.com/Fiware/tutorials.Entity-Relationships/master/docker-compose.yml) is used\nconfigure the required services for the application. This means all container services can be brought up in a single\ncommand. Docker Compose is installed by default as part of Docker for Windows and  Docker for Mac, however Linux users\nwill need to follow the instructions found  [here](https://docs.docker.com/compose/install/)\n\n## Cygwin\n\nWe will start up our services using a simple bash script. Windows users should download [cygwin](http://www.cygwin.com/) to provide a\ncommand line functionality similar to a Linux distribution on Windows.\n\n# Architecture\n\nThis introduction will only make use of one FIWARE component - the [Keyrock](http://fiware-idm.readthedocs.io/)\nIdentity Management Generic Enabler. Usage of **Keyrock** alone alone is insufficient for an application to qualify\n as *“Powered by FIWARE”*.  Additionally will be persisting user data in a **MySQL**  database.\n\n\nThe overall architecture will consist of the following elements:\n\n* One **FIWARE Generic Enabler**:\n    * FIWARE [Keyrock](http://fiware-idm.readthedocs.io/) offer a complement Identity Management System including:\n        * An OAuth2 authentication system for Applications and Users\n        * A website graphical front-end for Identity Management Administration\n        * An equivalent REST API for Identity Management via HTTP requests\n\n* One [MySQL](https://www.mysql.com/) database :\n    * Used to persist user identities, applications, roles and permsissions\n\n\nSince all interactions between the elements are initiated by HTTP requests, the entities can be containerized and run from exposed ports.\n\n\n![](https://fiware.github.io/tutorials.Roles-Permissions/img/architecture.png)\n\nThe specific architecture of each section of the tutorial is discussed below.\n\n## Keyrock Configuration\n\n```yaml\n  idm:\n    image: fiware-idm\n    container_name: idm\n    hostname: idm\n    depends_on:\n      - mysql-db\n    ports:\n      - \"3005:3005\"\n    networks:\n      default:\n    environment:\n      - DATABASE_HOST=mysql-db\n      - IDM_DB_PASS_FILE=/run/secrets/my_secret_data\n      - IDM_DB_USER=root\n      - IDM_HOST=http://localhost:3005\n      - IDM_PORT=3005\n    secrets:\n      - my_secret_data\n```\n\nThe `idm` container is a web app server listening on a single port:\n\n* Port `3005` has been  exposed for HTTP traffic so we can display the webpage and interact with the REST API.\n\n> **Note** The HTTP protocols is being used for demonstration purposes only.\n> In a production environment, all OAuth2 Authentication should occur over HTTPS, to avoid sending\n> any sensitive information using plain-text.\n\nThe `idm` container is driven by environment variables as shown:\n\n| Key |Value|Description|\n|-----|-----|-----------|\n|IDM_DB_PASS|`idm`| Password of the attached MySQL Database - secured by **Docker Secrets** (see below) |\n|IDM_DB_USER|`root`|Username of the default MySQL user - left in plain-text |\n|IDM_HOST|`http://localhost:3005`| Hostname of the **Keyrock**  App Server - used in activation eMails when signing up users|\n|IDM_PORT|`3005`| Port used by the **Keyrock** App Server  - this has been altered from the default 3000 port to avoid clashes |\n\n\n> :information_source: **Note** that this example has secured the MySQL password using **Docker Secrets**\n> By using `IDM_DB_PASS` with the `_FILE` suffix and referring to a secrets file location.\n> This avoids exposing the password as an `ENV` variable in plain-text - either in the `Dockerfile` Image or\n> as an injected variable which could be read using `docker inspect`.\n>\n> The following list of variables (where used) should be set via secrets with the  `_FILE` suffix  in a Production System:\n>\n> * `IDM_SESSION_SECRET`\n> * `IDM_ENCRYPTION_KEY`\n> * `IDM_DB_PASS`\n> * `IDM_DB_USER`\n> * `IDM_ADMIN_ID`\n> * `IDM_ADMIN_USER`\n> * `IDM_ADMIN_EMAIL`\n> * `IDM_ADMIN_PASS`\n> * `IDM_EX_AUTH_DB_USER`\n> * `IDM_EX_AUTH_DB_PASS`\n\n\n\n## MySQL Configuration\n\n```yaml\n  mysql-db:\n    image: mysql:5.7\n    hostname: mysql-db\n    container_name: db-mysql\n    expose:\n      - \"3306\"\n    ports:\n      - \"3306:3306\"\n    networks:\n      default:\n    environment:\n      - \"MYSQL_ROOT_PASSWORD_FILE=/run/secrets/my_secret_data\"\n      - \"MYSQL_ROOT_HOST=172.18.1.5\"\n    volumes:\n      - mysql-db:/var/lib/mysql\n    secrets:\n      - my_secret_data\n```\n\n\nThe `mysql-db` container is listening on a single port:\n\n* Port `3306` is the default port for a MySQL server. It has been exposed so you can also run other database tools to display data if you wish\n\nThe `mysql-db` container is driven by environment variables as shown:\n\n| Key               |Value.    |Description                               |\n|-------------------|----------|------------------------------------------|\n|MYSQL_ROOT_PASSWORD|`123`.    | specifies a password that is set for the MySQL `root` account - secured by **Docker Secrets** (see below)|\n|MYSQL_ROOT_HOST    |`root`| By default, MySQL creates the `root'@'localhost` account. This account can only be connected to from inside the container. Setting this environment variable allows root connections from other hosts |\n\n# Start Up\n\nTo start the installation, do the following:\n\n```console\ngit clone git@github.com:Fiware/tutorials.Roles-Permissions.git\ncd tutorials.Roles-Permissions\n\n./services create\n```\n\n>**Note** The initial creation of Docker images can take up to three minutes\n\n\nThereafter, all services can be initialized from the command line by running the [services](https://github.com/Fiware/tutorials.Roles-Permissions/blob/master/services) Bash script provided within the repository:\n\n```console\n./services <command>\n```\n\nWhere `<command>` will vary depending upon the exercise we wish to activate.\n\n>:information_source: **Note:** If you want to clean up and start over again you can do so with the following command:\n>\n>```console\n>./services stop\n>```\n>\n\n\n### Dramatis Personae\n\nThe following people at `test.com` legitimately have accounts within the Application\n\n* Alice, she will be the Administrator of the **Keyrock** Application\n* Bob, the Regional Manager of the supermarket chain - he has several store managers under him:\n  * Manager1\n  * Manager2\n* Charlie, the Head of Security of the supermarket chain - he has several store detectives under him:\n  * Detective1\n  * Detective2\n\nThe following people at `example.com`  have signed up for accounts, but have no reason to be granted access\n\n* Eve - Eve the Eavesdropper\n* Mallory - Mallory the malicious attacker\n* Rob - Rob the Robber\n\n\n| Name       |eMail                       |Password | UUID                                  |\n|------------|----------------------------|---------|---------------------------------------|\n| alice      | alice-the-admin@test.com   | `test`  |`aaaaaaaa-good-0000-0000-000000000000` |\n| bob        | bob-the-manager@test.com   | `test`  |`bbbbbbbb-good-0000-0000-000000000000` |\n| charlie    | charlie-security@test.com  | `test`  |`cccccccc-good-0000-0000-000000000000` |\n| manager1   | manager1@test.com          | `test`  |`manager1-good-0000-0000-000000000000` |\n| manager2   | manager2@test.com          | `test`  |`manager2-good-0000-0000-000000000000` |\n| detective1 | detective1@test.com        | `test`  |`secure01-good-0000-0000-000000000000` |\n| detective2 | detective2@test.com        | `test`  |`secure02-good-0000-0000-000000000000` |\n| eve        | eve@example.com            | `test`  |`eeeeeeee-evil-0000-0000-000000000000` |\n| mallory    | mallory@example.com        | `test`  |`mmmmmmmm-evil-0000-0000-000000000000` |\n| rob        | rob@example.com            | `test`  |`rrrrrrrr-evil-0000-0000-000000000000` |\n\n\nTwo organizations have also been set up by Alice:\n\n| Name       | Description                         | UUID                                 |\n|------------|-------------------------------------|--------------------------------------|\n| Security   | Security Group for Store Detectives |`security-0000-0000-0000-000000000000`|\n| Management | Management Group for Store Managers |`managers-0000-0000-0000-000000000000`|\n\nThe data creating users and organizations from the [previous tutorial](https://github.com/Fiware/tutorials.Identity-Management) has been downloaded:\n\n```console\ndocker exec db-mysql /usr/bin/mysqldump -u root --password=idmx idm > backup.sql\n```\n\nand is injected into the MySQL Database on start-up.\n\n\n\n\nTo refresh your memory about how to create users and organizations, you can log in at `http://localhost:3005/idm`\nusing the account `alice-the-admin@test.com` with a password of `test`.\n\n![](https://fiware.github.io/tutorials.Roles-Permissions/img/log-in.png)\n\nand look at the organizations list.\n\n\n\n### Reading directly from the Keyrock MySQL Database\n\nAll Identify Management records  and releationships are held within the the attached MySQL database. This can be\naccessed by entering the running Docker container as shown:\n\n\n```console\ndocker exec -it db-mysql bash\n```\n\n```console\nmysql -u <user> -p<password> idm\n```\n\nWhere `<user>` and `<password>` match the values defined in the `docker-compose` file for `MYSQL_ROOT_PASSWORD`\nand `MYSQL_ROOT_USER`. The default values for the tutorial are usually `root` and `secret`.\n\nSQL commands can then be entered from the command line. e.g.:\n\n```SQL\nselect id, username, email, password from user;\n```\n\n\n### UUIDs within Keyrock\n\nAll ids and tokens within  **Keyrock** are subject to change. The following values will need to be amended when\nquerying for records .Record ids use Universally Unique Identifiers - UUIDs.\n\n| Key |Description                        | Sample Value |\n|-----|-----------------------------------|--------------|\n|`keyrock`| URL for the location of the **Keyrock** service|`localhost:3005`|\n|`X-Auth-token`| Token received in the Header when logging in as a user |`aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa` = I am Alice|\n|`X-Subject-token`|Token to pass when asking about a subject, alternatively repeat the user token |`bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb` = Asking about Bob|\n|`user-id`| id of an existing user, found with the `user`  table |`bbbbbbbb-good-0000-0000-000000000000` - Bob's User Id|\n|`application-id`| id of an existing application, found with the `oauth_client` table |`c978218d-ad63-4427-b12b-542b81299cfb`|\n|`role-id`| id of an existing role, found with the `role` table |`d28baa00-839e-4b45-a6b2-1cec563942ee`|\n|`permission-id`| id of an existing permission, found with the `permission`  table |`6b6cd19c-9398-4834-9ba1-1616c57139c0`|\n|`organization-id`| id of an existing organization, found with the `organization`  table |`e424ed98-c966-46e3-b161-a165fd31bc01`|\n|`organization-role-id`| type of role a user has within an organization either `owner` or `member`|`member`|\n|`iot-agent-id`| id of an existing IoT Agent, found with the `iot`  table  |`iot_sensor_f3d0245b-3330-4e64-a513-81bf4b0dae64`|\n|`pep-proxy-id`| id of an existing PEP Proxy, found with the `pep_proxy`  table  |`iot_sensor_f3d0245b-3330-4e64-a513-81bf4b0dae64`|\n\nTokens are designed to expire after a set period. If the `X-Auth-token` value you are using has expired, log-in again to obtain a new token. For this tutorial, a long lasting set of tokens has been created for each user and persisted into the database,\nso there is usually no need to refresh tokens.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Logging In - Authentication",
			"description": "",
			"item": [
				{
					"name": "Create token with Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"admin@test.com\",\n  \"password\": \"1234\"\n}"
						},
						"url": {
							"raw": "http://{{keyrock}}/v1/auth/tokens",
							"protocol": "http",
							"host": [
								"{{keyrock}}"
							],
							"path": [
								"v1",
								"auth",
								"tokens"
							]
						},
						"description": "In order to manage the Identity Manager through the API you must obtain an access token to be included in HTTP headers. There are two methods to obtain an access token."
					},
					"response": []
				},
				{
					"name": "Get token info",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Auth-token",
								"value": "{{X-Auth-token}}"
							},
							{
								"key": "X-Subject-token",
								"value": "{{X-Subject-token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "http://{{keyrock}}/v1/auth/tokens",
							"protocol": "http",
							"host": [
								"{{keyrock}}"
							],
							"path": [
								"v1",
								"auth",
								"tokens"
							]
						},
						"description": "In order to manage the Identity Manager through the API you must obtain an access token to be included in HTTP headers. There are two methods to obtain an access token."
					},
					"response": []
				}
			]
		},
		{
			"name": "Managing Applications",
			"description": "",
			"item": [
				{
					"name": "Application CRUD Actions",
					"description": "",
					"item": [
						{
							"name": "Create an Application",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Auth-token",
										"value": "{{X-Auth-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"application\": {\n    \"name\": \"Test_application 1\",\n    \"description\": \"description\",\n    \"redirect_uri\": \"http://localhost/login\",\n    \"url\": \"http://localhost\",\n    \"grant_type\": [\n      \"authorization_code\",\n      \"implicit\",\n      \"password\"\n    ]\n  }\n}"
								},
								"url": {
									"raw": "http://{{keyrock}}/v1/applications",
									"protocol": "http",
									"host": [
										"{{keyrock}}"
									],
									"path": [
										"v1",
										"applications"
									]
								},
								"description": "Applications are registered in Keyrock and consume OAuth2 resources."
							},
							"response": []
						},
						{
							"name": "Read Application details",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Auth-token",
										"value": "{{X-Auth-token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{keyrock}}/v1/applications/{{application-id}}",
									"protocol": "http",
									"host": [
										"{{keyrock}}"
									],
									"path": [
										"v1",
										"applications",
										"{{application-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Applications",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Auth-token",
										"value": "{{X-Auth-token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{keyrock}}/v1/applications",
									"protocol": "http",
									"host": [
										"{{keyrock}}"
									],
									"path": [
										"v1",
										"applications"
									]
								},
								"description": "Applications are registered in Keyrock and consume OAuth2 resources."
							},
							"response": []
						},
						{
							"name": "Update an Application",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "{{Content-Type}}"
									},
									{
										"key": "X-Auth-token",
										"value": "{{X-Auth-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"application\": {\n    \"name\": \"new name\",\n    \"description\": \"new description\",\n    \"redirect_uri\": \"new redirect uri\",\n    \"grant_type\": [\n      \"authorization_code\",\n      \"password\"\n    ]\n  }\n}"
								},
								"url": {
									"raw": "http://{{keyrock}}/v1/applications/{{application-id}}",
									"protocol": "http",
									"host": [
										"{{keyrock}}"
									],
									"path": [
										"v1",
										"applications",
										"{{application-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete an Application",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Auth-token",
										"value": "{{X-Auth-token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{keyrock}}/v1/applications/{{application-id}}",
									"protocol": "http",
									"host": [
										"{{keyrock}}"
									],
									"path": [
										"v1",
										"applications",
										"{{application-id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Permission CRUD Actions",
					"description": "",
					"item": [
						{
							"name": "Create a Permission",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "{{Content-Type}}"
									},
									{
										"key": "X-Auth-token",
										"value": "{{X-Auth-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"permission\": {\n    \"name\": \"Access Login\",\n    \"action\": \"GET\",\n    \"resource\": \"login\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{keyrock}}/v1/applications/{{application-id}}/permissions",
									"protocol": "http",
									"host": [
										"{{keyrock}}"
									],
									"path": [
										"v1",
										"applications",
										"{{application-id}}",
										"permissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Permission details",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Auth-token",
										"value": "{{X-Auth-token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{keyrock}}/v1/applications/{{application-id}}/permissions/{{permission-id}}",
									"protocol": "http",
									"host": [
										"{{keyrock}}"
									],
									"path": [
										"v1",
										"applications",
										"{{application-id}}",
										"permissions",
										"{{permission-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Permissions",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Auth-token",
										"value": "{{X-Auth-token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{keyrock}}/v1/applications/{{application-id}}/permissions",
									"protocol": "http",
									"host": [
										"{{keyrock}}"
									],
									"path": [
										"v1",
										"applications",
										"{{application-id}}",
										"permissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a Permission",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "{{Content-Type}}"
									},
									{
										"key": "X-Auth-token",
										"value": "{{X-Auth-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"permission\": {\n    \"name\": \"Accessing Login\",\n    \"action\": \"GET\",\n    \"resource\": \"login\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{keyrock}}/v1/applications/{{application-id}}/permissions/{{permission-id}}",
									"protocol": "http",
									"host": [
										"{{keyrock}}"
									],
									"path": [
										"v1",
										"applications",
										"{{application-id}}",
										"permissions",
										"{{permission-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a Permission",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Auth-token",
										"value": "{{X-Auth-token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "http://keyrock/v1/applications/:application_id/permissions/:permission_id",
									"protocol": "http",
									"host": [
										"keyrock"
									],
									"path": [
										"v1",
										"applications",
										":application_id",
										"permissions",
										":permission_id"
									],
									"variable": [
										{
											"key": "application_id",
											"value": "{{application_id}}"
										},
										{
											"key": "permission_id",
											"value": "{{permission_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Role CRUD Actions",
					"description": "",
					"item": [
						{
							"name": "List Roles",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Auth-token",
										"value": "{{X-Auth-token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{keyrock}}/v1/applications/{{application-id}}/roles",
									"protocol": "http",
									"host": [
										"{{keyrock}}"
									],
									"path": [
										"v1",
										"applications",
										"{{application-id}}",
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a Role",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "{{Content-Type}}"
									},
									{
										"key": "X-Auth-token",
										"value": "{{X-Auth-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"role\": {\n    \"name\": \"viewer\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{keyrock}}/v1/applications/{{application-id}}/roles",
									"protocol": "http",
									"host": [
										"{{keyrock}}"
									],
									"path": [
										"v1",
										"applications",
										"{{application-id}}",
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Role details",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Auth-token",
										"value": "{{X-Auth-token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{keyrock}}/v1/applications/{{application-id}}/roles/{{role-id}}",
									"protocol": "http",
									"host": [
										"{{keyrock}}"
									],
									"path": [
										"v1",
										"applications",
										"{{application-id}}",
										"roles",
										"{{role-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a Role",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "{{Content-Type}}"
									},
									{
										"key": "X-Auth-token",
										"value": "{{X-Auth-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"role\": {\n    \"name\": \"Read-only\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{keyrock}}/v1/applications/{{application-id}}/roles/{{role-id}}",
									"protocol": "http",
									"host": [
										"{{keyrock}}"
									],
									"path": [
										"v1",
										"applications",
										"{{application-id}}",
										"roles",
										"{{role-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a Role",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Auth-token",
										"value": "{{X-Auth-token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{keyrock}}/v1/applications/{{application-id}}/roles/{{role-id}}",
									"protocol": "http",
									"host": [
										"{{keyrock}}"
									],
									"path": [
										"v1",
										"applications",
										"{{application-id}}",
										"roles",
										"{{role-id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Assigning Permissions to each Role",
					"description": "",
					"item": [
						{
							"name": "List permissions associated to a role",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Auth-token",
										"value": "{{X-Auth-token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{keyrock}}/v1/applications/{{application-id}}/roles/{{role-id}}/permissions",
									"protocol": "http",
									"host": [
										"{{keyrock}}"
									],
									"path": [
										"v1",
										"applications",
										"{{application-id}}",
										"roles",
										"{{role-id}}",
										"permissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign a permission to a role",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "{{Content-Type}}"
									},
									{
										"key": "X-Auth-token",
										"value": "{{X-Auth-token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{keyrock}}/v1/applications/{{application-id}}/roles/{{role-id}}/permissions/{{permission-id}}",
									"protocol": "http",
									"host": [
										"{{keyrock}}"
									],
									"path": [
										"v1",
										"applications",
										"{{application-id}}",
										"roles",
										"{{role-id}}",
										"permissions",
										"{{permission-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove a permission from a role",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Auth-token",
										"value": "{{X-Auth-token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "http://keyrock/v1/applications/:application_id/roles/:role_id/permissions/:permission_id",
									"protocol": "http",
									"host": [
										"keyrock"
									],
									"path": [
										"v1",
										"applications",
										":application_id",
										"roles",
										":role_id",
										"permissions",
										":permission_id"
									],
									"variable": [
										{
											"key": "application_id",
											"value": "{{application_id}}"
										},
										{
											"key": "role_id",
											"value": "{{role_id}}"
										},
										{
											"key": "permission_id",
											"value": "{{permission_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Authorizing Application Access",
			"description": "",
			"item": [
				{
					"name": "Roles for Groups of Users",
					"description": "",
					"item": [
						{
							"name": "List organizations role assignments",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Auth-token",
										"value": "{{X-Auth-token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{keyrock}}/v1/applications/{{application-id}}/organizations/{{organization-id}}/roles",
									"protocol": "http",
									"host": [
										"{{keyrock}}"
									],
									"path": [
										"v1",
										"applications",
										"{{application-id}}",
										"organizations",
										"{{organization-id}}",
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign a role to a organization",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "{{Content-Type}}"
									},
									{
										"key": "X-Auth-token",
										"value": "{{X-Auth-token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{keyrock}}/v1/applications/{{application-id}}/organizations/{{organization-id}}/roles/{{role-id}}/organization_roles/{{organization-role-id}}",
									"protocol": "http",
									"host": [
										"{{keyrock}}"
									],
									"path": [
										"v1",
										"applications",
										"{{application-id}}",
										"organizations",
										"{{organization-id}}",
										"roles",
										"{{role-id}}",
										"organization_roles",
										"{{organization-role-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove a role assignment from an organization",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{keyrock}}/v1/applications/{{application-id}}/organizations/{{organization-id}}/roles/{{role-id}}/organization_roles/{{organization-role-id}}",
									"protocol": "http",
									"host": [
										"{{keyrock}}"
									],
									"path": [
										"v1",
										"applications",
										"{{application-id}}",
										"organizations",
										"{{organization-id}}",
										"roles",
										"{{role-id}}",
										"organization_roles",
										"{{organization-role-id}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2bf17df7-0d1d-4912-a69c-0e8dc22bf337",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6a3aa613-dad6-461c-81a9-f5520737af11",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Roles for User Accounts",
					"description": "",
					"item": [
						{
							"name": "List users role assignments",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Auth-token",
										"value": "{{X-Auth-token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{keyrock}}/v1/applications/{{application-id}}/users/{{user-id}}/roles",
									"protocol": "http",
									"host": [
										"{{keyrock}}"
									],
									"path": [
										"v1",
										"applications",
										"{{application-id}}",
										"users",
										"{{user-id}}",
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign a role to a user",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "{{Content-Type}}"
									},
									{
										"key": "X-Auth-token",
										"value": "{{X-Auth-token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{keyrock}}/v1/applications/{{application-id}}/users/{{user-id}}/roles/{{role-id}}",
									"protocol": "http",
									"host": [
										"{{keyrock}}"
									],
									"path": [
										"v1",
										"applications",
										"{{application-id}}",
										"users",
										"{{user-id}}",
										"roles",
										"{{role-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove a role assignment from a user",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://keyrock/v1/applications/:application_id/users/:user_id/roles/:role_id",
									"protocol": "http",
									"host": [
										"keyrock"
									],
									"path": [
										"v1",
										"applications",
										":application_id",
										"users",
										":user_id",
										"roles",
										":role_id"
									],
									"variable": [
										{
											"key": "user_id",
											"value": "{{user_id}}"
										},
										{
											"key": "application_id",
											"value": "{{application_id}}"
										},
										{
											"key": "role_id",
											"value": "{{role_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e9f051d3-a4fb-4c7d-af66-9b06b9189bd1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4f8592fb-8ef9-4ef1-a492-551664ca9ad6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "90440d97-8fd8-4924-92a6-42e2814a247c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2163dca2-a57a-43a6-90f7-f93b390f66f9",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Defining Other Actors within an Application",
			"description": "",
			"item": [
				{
					"name": "PEP Proxy CRUD Actions",
					"description": "",
					"item": [
						{
							"name": "Info Pep Proxy",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Auth-token",
										"value": "{{X-Auth-token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{keyrock}}/v1/applications/{{application-id}}/pep_proxies",
									"protocol": "http",
									"host": [
										"{{keyrock}}"
									],
									"path": [
										"v1",
										"applications",
										"{{application-id}}",
										"pep_proxies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a Pep Proxy",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Auth-token",
										"value": "{{X-Auth-token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{keyrock}}/v1/applications/{{application-id}}/pep_proxies",
									"protocol": "http",
									"host": [
										"{{keyrock}}"
									],
									"path": [
										"v1",
										"applications",
										"{{application-id}}",
										"pep_proxies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reset Password of Pep Proxy",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "{{Content-Type}}"
									},
									{
										"key": "X-Auth-token",
										"value": "{{X-Auth-token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{keyrock}}/v1/applications/{{application-id}}/pep_proxies",
									"protocol": "http",
									"host": [
										"{{keyrock}}"
									],
									"path": [
										"v1",
										"applications",
										"{{application-id}}",
										"pep_proxies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Pep Proxy",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "{{Content-Type}}"
									},
									{
										"key": "X-Auth-token",
										"value": "{{X-Auth-token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{keyrock}}/v1/applications/{{application-id}}/pep_proxies",
									"protocol": "http",
									"host": [
										"{{keyrock}}"
									],
									"path": [
										"v1",
										"applications",
										"{{application-id}}",
										"pep_proxies"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "IoT Agent CRUD Actions",
					"description": "",
					"item": [
						{
							"name": "List of Iot Agents",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Auth-token",
										"value": "{{X-Auth-token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{keyrock}}/v1/applications/{{application-id}}/iot_agents",
									"protocol": "http",
									"host": [
										"{{keyrock}}"
									],
									"path": [
										"v1",
										"applications",
										"{{application-id}}",
										"iot_agents"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create an Iot Agent",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "{{Content-Type}}"
									},
									{
										"key": "X-Auth-token",
										"value": "{{X-Auth-token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{keyrock}}/v1/applications/{{application-id}}/iot_agents",
									"protocol": "http",
									"host": [
										"{{keyrock}}"
									],
									"path": [
										"v1",
										"applications",
										"{{application-id}}",
										"iot_agents"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Iot agent details",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Auth-token",
										"value": "{{X-Auth-token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{keyrock}}/v1/applications/{{application-id}}/iot_agents/{{iot-agent-id}}",
									"protocol": "http",
									"host": [
										"{{keyrock}}"
									],
									"path": [
										"v1",
										"applications",
										"{{application-id}}",
										"iot_agents",
										"{{iot-agent-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reset Password of Iot Agent",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "{{Content-Type}}"
									},
									{
										"key": "X-Auth-token",
										"value": "{{X-Auth-token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{keyrock}}/v1/applications/{{application-id}}",
									"protocol": "http",
									"host": [
										"{{keyrock}}"
									],
									"path": [
										"v1",
										"applications",
										"{{application-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete an Iot Agent",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Auth-token",
										"value": "{{X-Auth-token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{keyrock}}/v1/applications/{{application-id}}/permissions/{{iot-agent-id}}",
									"protocol": "http",
									"host": [
										"{{keyrock}}"
									],
									"path": [
										"v1",
										"applications",
										"{{application-id}}",
										"permissions",
										"{{iot-agent-id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "f32d4f4e-6a77-4b0a-9cd1-7fdc58c14247",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "453a7383-bb2a-4e01-8ed4-7355fb12520f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "16da6d5d-27df-41a6-a13b-9f76368bb589",
			"key": "keyrock",
			"value": "localhost:3005",
			"type": "string",
			"description": ""
		},
		{
			"id": "da783bbb-b72f-4f47-be70-767c8059be35",
			"key": "X-Auth-token",
			"value": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
			"type": "string",
			"description": ""
		},
		{
			"id": "5a5a1094-3024-43ba-b7eb-634b8367dbdb",
			"key": "X-Subject-token",
			"value": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
			"type": "string",
			"description": ""
		},
		{
			"id": "a9184069-04d5-4b6d-8094-10582387cf49",
			"key": "user-id",
			"value": "bbbbbbbb-good-0000-0000-000000000000",
			"type": "string",
			"description": ""
		},
		{
			"id": "7f4973f7-167c-4fef-93f2-107590019295",
			"key": "organization-id",
			"value": "security-0000-0000-0000-000000000000",
			"type": "string",
			"description": ""
		},
		{
			"id": "2529aa44-ffb8-4e16-869e-ed68c1d60746",
			"key": "application-id",
			"value": "ac8724cd-ff76-447f-af41-1ede9681aed3",
			"type": "string",
			"description": ""
		},
		{
			"id": "1630f13d-a7ce-4ff4-ba62-04c007cdafea",
			"key": "role-id",
			"value": "e424ed98-c966-46e3-b161-a165fd31bc01",
			"type": "string",
			"description": ""
		},
		{
			"id": "cd6f3bf2-b795-4d7e-bed6-467712311251",
			"key": "permisson-id",
			"value": "e424ed98-c966-46e3-b161-a165fd31bc01",
			"type": "string",
			"description": ""
		}
	]
}